{"version":3,"sources":["component/TextForm.js","component/Navbar.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["TextForm","props","useState","text","settext","className","style","color","mode","heading","value","onChange","event","target","backgroundColor","id","rows","placeholder","padding","onClick","newText","toUpperCase","showalert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","newtext","split","join","length","Navbar","href","title","type","toggleMode","role","htmlfor","toggleMode1","prototype","PropTypes","string","isRequired","aboutText","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setalert","message","setTimeout","body","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.96fd0c13.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        //   console.log(\"Upparcase was Clicked\");\r\n          let newText=text.toUpperCase()\r\n          settext(newText);\r\n          props.showalert(\"Converted to Uppercase\",\"success\")\r\n    }\r\n    const handleDownClick = () => {\r\n        // console.log(\"Lowercase was Clicked\");\r\n        let newText=text.toLowerCase()\r\n        settext(newText);\r\n       props.showalert(\"Converted to LowerCase\",\"success\");\r\n  }\r\n  const handleClearClick = (event) => {\r\n    let newText=\"\"\r\n    settext(newText);\r\n    props.showalert(\"Clear\",\"success\")\r\n}\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On Changed\");\r\n        settext(event.target.value);\r\n  }\r\n  const handleCopy = (event) => {\r\n    let text=document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showalert(\"Text Copied\",\"success\")\r\n}\r\n const handleExtraSpace = (event) => {\r\n     let newtext = text.split(/[ ]+/);\r\n     settext(newtext.join(\" \"));\r\n     props.showalert(\"Extra Space Removed\",\"success\")\r\n }\r\n    const [text, settext] = useState(\"\")\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color:props.mode === 'dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode === 'light'?'white':'grey',color:props.mode === 'dark'?'white':'black'}} id=\"myBox\" rows=\"12\" placeholder=\"Enter The Text Here\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-3 \" style={{padding:\"10px\" }} onClick={handleUpClick}>Convert Upparcase</button>\r\n            <button className=\"btn btn-primary mx-3\" style={{padding:\"10px\" }} onClick={handleDownClick}>Convert Lowercase</button>\r\n            <button className=\"btn btn-primary mx-3\" style={{padding:\"10px\" }} onClick={handleClearClick}>Clear</button>\r\n            <button className=\"btn btn-primary mx-3\" style={{padding:\"10px\" }} onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-3\" style={{padding:\"10px\" }} onClick={handleExtraSpace}>Remove Extra Space</button>\r\n        </div>\r\n        <div className=\"container my-4\" style={{color:props.mode === 'dark'?'white':'black'}}>\r\n            <h2>Your Text Summary</h2>\r\n            <p>{text.split(\" \").length} Words and {text.length} Characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter Something in the TextBox to Preview it Here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';  //impt\r\nimport AboutUs from \"./AboutUs\";\r\nimport TextForm from \"./TextForm\";\r\nimport {useState} from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nfunction Navbar(props){\r\n  const [pageChange, setPageChange] = useState(\"\")\r\n  let pageChanges=()=>{\r\n    setPageChange(\r\n    )\r\n  }\r\n    return(\r\n        <>\r\n      <nav className={`navbar navbar-expand-lg navba-${props.mode}  bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" href=\"/AboutUs\" onClick={pageChanges}>{props.aboutText}</a>\r\n        </li> */}\r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n      <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n    <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">Enable Dark Mode in Grey</label>\r\n   </div>\r\n   <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n      <input className=\"form-check-input\" onClick={props.toggleMode1} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n    <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">Enable Dark Mode in Green</label>\r\n   </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n</>\r\n    );\r\n}\r\n\r\nNavbar.prototype= {title: PropTypes.string.isRequired,\r\naboutText:PropTypes.string}\r\n\r\n// Navbar.defaultProps = {\r\n  // title:\"Text\",\r\n  // aboutText:\"About\"\r\n// }  Defaul Props\r\nexport default Navbar;","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\n// import AboutUs from './component/AboutUs';\nimport Navbar from './component/Navbar';\nimport TextForm from './component/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './component/Alert';\n// import {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nfunction App() {\n  const [mode, setMode] = useState(\"light\")\n  const [alert, setalert] = useState(null)\n  const showalert = (message,type) =>{\n    setalert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n      setalert(null);\n    },1000);\n  }\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark')\n      document.body.style.backgroundColor='grey';\n      showalert(\"Dark Mode has been Enabled\", \"success\");\n      document.title=\"TextUtils - Dark Mode Grey\";\n      setInterval(()=>{\n        document.title = \"TextUtils is Amazing\";\n      },3000);\n      setInterval(()=>{\n        document.title = \"Install TextUtils\";\n      },5000);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showalert(\"Light Mode has been Enabled\", \"success\")\n      document.title=\"TextUtils - Light Mode\";\n      setInterval(()=>{\n        document.title = \"TextUtils is Amazing\";\n      },3000);\n      setInterval(()=>{\n        document.title = \"Install TextUtils\";\n      },5000);\n    }\n  }\n  const toggleMode1 = ()=>{\n    if(mode === 'light'){\n      setMode('dark')\n      document.body.style.backgroundColor='green';\n      showalert(\"Dark Mode has been Enabled in Green\", \"success\");\n      document.title=\"TextUtils - Dark Mode Green\";\n      setInterval(()=>{\n        document.title = \"TextUtils is Amazing\";\n      },3000);\n      setInterval(()=>{\n        document.title = \"Install TextUtils\";\n      },5000);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showalert(\"Light Mode has been Enabled\", \"success\")\n      document.title=\"TextUtils - Light Mode\";\n      setInterval(()=>{\n        document.title = \"TextUtils is Amazing\";\n      },3000);\n      setInterval(()=>{\n        document.title = \"Install TextUtils\";\n      },5000);\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" mode={mode} toggleMode={toggleMode} toggleMode1={toggleMode1}/>\n    <Alert  alert={alert}/>\n    <div className=\"container my-3\">\n    {/* <Switch> */}\n        {/* <Route exact path=\"/about\">\n          <AboutUs/>\n        </Route> */}\n        {/* <Route exact path=\"/\"> */}\n          <TextForm showalert={showalert} heading=\"Enter the Text for analyze\" mode={mode} />\n        {/* </Route> */}\n    {/* </Switch> */}\n    </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}